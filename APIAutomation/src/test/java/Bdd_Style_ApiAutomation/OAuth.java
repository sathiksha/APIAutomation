package Bdd_Style_ApiAutomation;

import static io.restassured.RestAssured.*;

import org.testng.annotations.Test;

public class OAuth {
	
    @Test
	public void OAuth2Flow() {
		
      String token = "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";
		
		given()
		 .auth()
		 .oauth2(token)
		.when()
		.get("https://api.github.com/user/repos")
		.body().prettyPrint();
	}

}


/* Bearer Token:

Bearer Token is a simple form of authentication, commonly used in stateless environments like RESTful APIs.
It is a security token that is usually included in the request header as an authentication credential.
The token is self-contained and holds the necessary information to authenticate the user or client. It does not rely on any session state on the server.
The token is usually a string of random characters generated by the server and issued to the client after successful authentication.
It is typically used for short-lived and single-use authentication scenarios.
OAuth 2.0:

OAuth 2.0 is a more comprehensive and versatile authorization framework used for delegated authorization and identity management.
It enables secure access delegation, allowing third-party applications to access user resources on behalf of the user, without sharing the user's credentials.
OAuth 2.0 involves multiple parties: the resource owner (user), the client application (third-party app), the resource server (API server), and the authorization server (responsible for handling access tokens).
It uses access tokens to grant access to protected resources. These tokens are obtained by exchanging authorization grants (such as authorization code, client credentials, etc.) with the authorization server.
OAuth 2.0 supports various grant types depending on the application's requirements, such as Authorization Code Grant, Implicit Grant, Client Credentials Grant, and Resource Owner Password Credentials Grant.
OAuth 2.0 allows for long-lived access tokens, token refreshing, and fine-grained access control.
In summary, Bearer Token is a simple and straightforward authentication mechanism used mainly for stateless API authentication, while OAuth 2.0 is a comprehensive framework for delegated authorization, enabling third-party applications to access resources on behalf of the user without revealing their credentials. OAuth 2.0 provides more flexibility and security for managing access to protected resources in various scenarios.





*/